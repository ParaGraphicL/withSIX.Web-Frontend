// Generated by typings
// Source: https://raw.githubusercontent.com/SIXNetworks/withsix-sync-api-js/master/dist/withsix-sync-api.d.ts
declare module 'withsix-sync-api' {
   export * from '__withsix-sync-api/converter';
   export * from '__withsix-sync-api/connection';
   export * from '__withsix-sync-api/client';
   export * from '__withsix-sync-api/hubs';
   export * from '__withsix-sync-api/models';
}

declare module '__withsix-sync-api/converter' {
   export class Conversion {
      static convertFromServer<T>(promise: Promise<T>): Promise<any>;
      static convertFromClientAll<T>(promise: JQueryPromise<T>): Promise<any>;
      static convertPromise<T>(promise: JQueryPromise<T>): Promise<T>;
      static toUpperCaseFirst(str: string): string;
      static toLowerCaseFirst(str: string): string;
      static converter: {
         serverPropertyNameToClient: (prop: string) => string;
         clientPropertyNameToServer: (prop: string) => string;
      };
      static iso8601RegEx: RegExp;
      static convertToClient(obj: any): any;
   }
}

declare module '__withsix-sync-api/connection' {
   import 'ms-signalr-client';
   import { EventAggregator } from 'aurelia-event-aggregator';
   export interface ISignalrConnection {
      connection: HubConnection;
      connected: boolean;
      promise(): Promise<HubConnection>;
      execHub<T>(hub: HubProxy, hubName: string, commandName: string, command?: Object): Promise<T>;
      registerHubEvent(hub: HubProxy, eventName: string, hubName: string): any;
      sender: any;
      upgradeCompleted: boolean;
   }
   export enum ConnectionState {
      connecting = 0,
      connected = 1,
      reconnecting = 2,
      disconnected = 4,
   }
   export class SignalrConnection implements ISignalrConnection {
      name: string;
      protected eventBus: EventAggregator;
      debug: boolean;
      promiseCacheKey: string;
      connection: HubConnection;
      sender: any;
      upgradeCompleted: boolean;
      constructor(name: string, connectionInfo: string, eventBus: EventAggregator, promiseCache: PromiseCache, reconnect?: boolean, debug?: boolean);
      protected onConnect(): void;
      protected onDisconnect(): void;
      sendIpc(...args: any[]): void;
      execHub<T>(hub: HubProxy, hubName: string, commandName: string, command?: Object): Promise<T>;
      registerHubEvent: (hub: HubProxy, eventName: string, hubName: string) => HubProxy;
      connected: boolean;
      promise(): Promise<HubConnection>;
   }
   export class MiniClientConnection extends SignalrConnection {
   }
   export interface IPromiseCacheOptions {
      expireOnFailure: boolean;
   }
   export class PromiseCache {
      getOrAdd<T>(key: any, promiseCreator: () => Promise<T>, opts?: IPromiseCacheOptions): Promise<T>;
      update<T>(key: any, promiseCreator: () => Promise<T>, opts?: IPromiseCacheOptions): Promise<T>;
      remove(key: any): void;
   }
}

declare module '__withsix-sync-api/client' {
   import { ConnectionState, PromiseCache } from '__withsix-sync-api/connection';
   import { EventAggregator } from 'aurelia-event-aggregator';
   import { IUserErrorResponse, IGeneralSettings, IOpenFolder, IGamesSettings, IGameSettings, IPlayContent, IPlayContents, IDeleteCollection, ISyncCollections, ILaunchGame, IClientInfo, IClientInfo2, ILaunchContent, ILaunchContents, IInstallContent, IInstallContents, IHome, IGameHome, IGamesData, ICollectionsData, IModsData, IMissionsData, IUploadFolder, IQueueInfo, IMiniClientInfo, IAccessInfo } from '__withsix-sync-api/models/model';
   import { Hub, ServerHub, ContentHub, ClientHub, SettingsHub, StatusHub, QueueHub } from '__withsix-sync-api/hubs';
   export interface IHubs {
      [hub: string]: Hub;
      settings?: SettingsHub;
      content?: ContentHub;
      client?: ClientHub;
      status?: StatusHub;
      queue?: QueueHub;
      server?: ServerHub;
   }
   export class StateChanged {
      oldState: ConnectionState;
      newState: ConnectionState;
      constructor(oldState: ConnectionState, newState: ConnectionState);
   }
   export class Client {
      static defaultPort: number;
      static host: string;
      static version: string;
      endpoint: string;
      hubs: IHubs;
      clientInfo: IMiniClientInfo;
      readonly isConnected: boolean;
      currentVersion: string;
      constructor(eventBus: EventAggregator, promiseCache: PromiseCache, port?: number);
      state: ConnectionState;
      handleIpc: (id: any, hub: any, message: any, data?: any) => Promise<void>;
      getInfo(): Promise<IMiniClientInfo>;
      login(info: IAccessInfo): Promise<void>;
      removeRecent: (command: {
         gameId: string;
         id: string;
      }) => Promise<void>;
      clearRecent: (id: string) => Promise<void>;
      selectGame: (id: string) => Promise<void>;
      getGeneralSettings: () => Promise<IGeneralSettings>;
      getGamesSettings: () => Promise<IGamesSettings>;
      installExplorerExtension: () => Promise<void>;
      uninstallExplorerExtension: () => Promise<void>;
      getGameSettings<T>(id: string): Promise<IGameSettings<T>>;
      saveGeneralSettings(settings: IGeneralSettings): Promise<void>;
      saveGameSettings(gameId: string, settings: any): Promise<void>;
      playContent(command: IPlayContent): Promise<void>;
      playContents(command: IPlayContents): Promise<void>;
      launchContent(command: ILaunchContent): Promise<void>;
      launchContents(command: ILaunchContents): Promise<void>;
      installContent(command: IInstallContent): Promise<void>;
      uninstallContent(command: IInstallContent): Promise<void>;
      installCollection(command: IInstallContent): Promise<void>;
      deleteCollection(command: IDeleteCollection): Promise<void>;
      installContents(command: IInstallContents): Promise<void>;
      syncCollections(command: ISyncCollections): Promise<void>;
      launchGame(command: ILaunchGame): Promise<void>;
      abort(gameId: string): Promise<void>;
      abortAll: () => Promise<void>;
      updateMiniClient(): Promise<void>;
      getGameInfo(gameId: string): Promise<IClientInfo>;
      getGameContent(gameId: string): Promise<IClientInfo2>;
      getHome(): Promise<IHome>;
      getGameHome(gameId: string): Promise<IGameHome>;
      getGames(): Promise<IGamesData>;
      getGameCollections(gameId: string): Promise<ICollectionsData>;
      getGameMods(gameId: string): Promise<IModsData>;
      getGameMissions(gameId: string): Promise<IMissionsData>;
      prepareFolder: () => Promise<string>;
      uploadFolder: (command: IUploadFolder) => Promise<void>;
      getUploadFolder: (contentId: string) => Promise<string>;
      openFolder: (command: IOpenFolder) => Promise<void>;
      cancelQueueItem: (id: string) => Promise<void>;
      pauseQueueItem: (id: string) => Promise<void>;
      removeQueueItem: (id: string) => Promise<void>;
      retryQueueItem: (id: string) => Promise<void>;
      getQueueInfo: () => Promise<IQueueInfo>;
      next: (actionId: string) => Promise<void>;
      resolveUserError: (info: IUserErrorResponse) => Promise<void>;
   }
}

declare module '__withsix-sync-api/hubs' {
   export * from '__withsix-sync-api/hubs/base';
   export * from '__withsix-sync-api/hubs/server';
}

declare module '__withsix-sync-api/models' {
   export * from '__withsix-sync-api/models/model';
}

declare module '__withsix-sync-api/models/model' {
   export interface IGeneralSettings {
      launchWithWindows: boolean;
      optOutErrorReports: boolean;
      enableDesktopNotifications: boolean;
   }
   export interface IGameSettingsEntry {
      id: string;
      slug: string;
      name: string;
   }
   export interface IGamesSettings {
      games: IGameSettingsEntry[];
   }
   export interface IGameSettings<T> {
      settings: T;
   }
   export interface IContentGuidSpec {
      id: string;
      constraint?: string;
      isOnlineCollection?: boolean;
   }
   export interface IContentsBase {
      gameId: string;
      contents: IContentGuidSpec[];
      name?: string;
   }
   export interface IContentBase {
      gameId: string;
      content: IContentGuidSpec;
   }
   export interface IAccessInfo {
      accessToken: string;
   }
   export interface ISyncCollections extends IContentsBase {
   }
   export interface IPlayContents extends IContentsBase {
   }
   export interface IPlayContent extends IContentBase {
   }
   export interface ILaunchContents extends IContentsBase {
   }
   export interface ILaunchContent extends IContentBase {
   }
   export interface IInstallContents extends IContentsBase {
   }
   export interface IInstallContent extends IContentBase {
   }
   export interface IDeleteCollection {
      id: string;
      gameId: string;
   }
   export interface ILaunchGame {
      id: string;
      launchType: number;
   }
   export enum UpdateState {
      Uptodate = 0,
      UpdateInstalled = 1,
      UpdateAvailable = 2,
      UpdateDownloading = 3,
      Updating = 4,
   }
   export interface IMiniClientInfo {
      newVersionAvailable: string;
      version: string;
      apiVersion?: string;
      updateState: UpdateState;
      extensionInstalled: boolean;
   }
   export interface IContentState {
      id: string;
      gameId: string;
      state: ItemState;
      version: string;
      speed?: number;
      progress?: number;
      lastUsed?: Date;
   }
   export interface IContentStateChange {
      gameId: string;
      states: {
         [id: string]: IContentState;
      };
   }
   export interface IContentStatusChange extends IContentState {
      speed: number;
      progress: number;
   }
   export enum ActionType {
      Start = 0,
      End = 1,
      Fail = 2,
   }
   export interface INextActionInfo {
      title: string;
      text: string;
      requestId: string;
   }
   export interface IActionNotification {
      gameId: string;
      clientId: string;
      requestId: string;
      title: string;
      text: string;
      type: ActionType;
      nextActionInfo: INextActionInfo;
   }
   export interface IHome {
      updates: IContent[];
      newContent: IContent[];
      recent: IContent[];
      games: IGame[];
   }
   export interface IGamesData {
      games: IGame[];
   }
   export interface IContent {
      id: string;
      gameId: string;
      gameSlug: string;
      name: string;
      packageName?: string;
      slug: string;
      type: string;
      isFavorite?: boolean;
      author: string;
      authorSlug?: string;
      image: string;
      version?: string;
      disableActions?: boolean;
      sizePacked?: number;
      isRecent?: boolean;
      lastUsed?: Date;
      lastUpdated?: Date;
      lastInstalled?: Date;
      updatedVersion?: Date;
      originalGameId?: string;
      originalGameSlug?: string;
   }
   export interface IMod extends IContent {
   }
   export interface ICollection extends IContent {
      typeScope: TypeScope;
      hasServers: boolean;
   }
   export enum CollectionScope {
      Public = 0,
      Unlisted = 1,
      Private = 2,
   }
   export enum PreferredClient {
      Default = 0,
      Sync = 1,
      PlayWithSix = 2,
   }
   export enum TypeScope {
      Local = 0,
      Subscribed = 1,
      Published = 2,
   }
   export interface IMission extends IContent {
   }
   export interface IModsData {
      mods: IMod[];
   }
   export interface ICollectionsData {
      collections: ICollection[];
   }
   export interface IMissionsData {
      missions: IMission[];
   }
   export interface IGame {
      id: string;
      slug: string;
      name: string;
      type: string;
   }
   export interface IGameHome {
      updates: IContent[];
      newContent: IContent[];
      recent: IContent[];
      installedMissionsCount: number;
      installedModsCount: number;
   }
   export enum ItemState {
      NotInstalled = 0,
      Uptodate = 1,
      UpdateAvailable = 2,
      Incomplete = 3,
      Installing = 11,
      Updating = 12,
      Uninstalling = 13,
      Diagnosing = 14,
      Launching = 15,
   }
   export interface ILocalContent extends IContent {
      packageName: string;
      contentId: string;
   }
   export interface IRecentContent extends IContent {
      usedAt: Date;
   }
   export interface IFavoriteContent extends IContent {
   }
   export interface IClientInfo2 {
      installedContent: ILocalContent[];
      recentContent: IRecentContent[];
      favoriteContent: IFavoriteContent[];
      localCollections: ILocalContent[];
   }
   export interface IChildActionState {
      title: string;
      text: string;
      details?: string;
      progress?: number;
      speed?: number;
   }
   export interface IActionTabState {
      progress?: number;
      text: string;
      type: ActionType;
      nextActionInfo?: INextActionInfo;
      childAction: IChildActionState;
   }
   export interface IActionTabStateUpdate {
      progress?: number;
      childAction: IChildActionState;
   }
   export interface IClientInfo {
      content: {
         [id: string]: IContentState;
      };
      globalLock: boolean;
      gameLock: boolean;
      canAbort: boolean;
      isRunning: boolean;
      actionInfo: IActionTabState;
      userErrors: IUserError[];
   }
   export enum State {
      Normal = 0,
      Paused = 1,
      Error = 2,
   }
   export interface IUploadFolder {
      folder: string;
      gameId: string;
      contentId: string;
      userName: string;
      password: string;
   }
   export interface IOpenFolder {
      id?: string;
      gameId: string;
   }
   export interface IModInfo {
      installedVersion: string;
      latestVersion: string;
      id: string;
      state: string;
   }
   export enum CompletionState {
      NotComplete = 0,
      Success = 1,
      Failure = 2,
      Canceled = 3,
   }
   export interface IProgressState {
      progress: number;
      speed?: number;
      action: string;
   }
   export interface IQueueItem {
      id: string;
      title: string;
      created: Date;
      progressState?: IProgressState;
      state?: CompletionState;
   }
   export interface IQueueUpdate {
      id: string;
      item: IQueueItem;
   }
   export interface IItemData extends Array<IQueueItem> {
   }
   export interface IQueueInfo {
      items: IItemData;
   }
   export interface IUserErrorAdded {
      userError: IUserError;
   }
   export interface IUserErrorResolved {
      id: string;
      result: string;
   }
   export interface IRecoveryOption {
      commandName: string;
      recoveryResult: string;
   }
   export interface IUserError {
      errorMessage: string;
      errorCauseOrResolution: string;
      recoveryOptions: IRecoveryOption[];
      type: string;
      id: string;
      data?: {};
   }
   export interface IMessageBoxSignature {
      message: string;
      title: string;
      buttons: string[];
   }
   export interface IUserErrorResponse {
      id: string;
      result: string;
      data?: {};
   }
}

declare module '__withsix-sync-api/hubs/base' {
   import { ISignalrConnection } from '__withsix-sync-api/connection';
   import { IMiniClientInfo } from '__withsix-sync-api/models';
   export abstract class Hub {
      protected connection: ISignalrConnection;
      hub: HubProxy;
      constructor(connection: ISignalrConnection, name: string, events: string[]);
      exec<T>(commandName: string, data?: any): Promise<T>;
   }
   export class StatusHub extends Hub {
      static $name: string;
      static $events: string[];
      constructor(connection: ISignalrConnection);
   }
   export class ContentHub extends Hub {
      static $name: string;
      static $events: string[];
      constructor(connection: ISignalrConnection);
   }
   export class ClientHub extends Hub {
      static $name: string;
      static $events: string[];
      constructor(connection: ISignalrConnection);
      getInfo: () => Promise<IMiniClientInfo>;
      browseFolderDialog: (options: {
         defaultPath?: string;
      }) => Promise<string>;
   }
   export class SettingsHub extends Hub {
      static $name: string;
      static $events: any[];
      constructor(connection: ISignalrConnection);
   }
   export class QueueHub extends Hub {
      static $name: string;
      static $events: string[];
      constructor(connection: ISignalrConnection);
   }
}

declare module '__withsix-sync-api/hubs/server' {
   import { Hub } from '__withsix-sync-api/hubs/base';
   import { ISignalrConnection } from '__withsix-sync-api/connection';
   export class ServerHub extends Hub {
      static $name: string;
      static $events: any[];
      constructor(connection: ISignalrConnection);
      getServers: (info: IGetServers) => Promise<IServers>;
      getServersInfo: (info: IGetServersInfo) => Promise<IServersInfo>;
      queryServers: (info: IQueryServers) => Promise<IServersInfo>;
   }
   export interface IIPEndpoint {
      address: string;
      port: number;
   }
   export interface IServers {
      addresses: IIPEndpoint[];
   }
   export interface IServersInfo {
      servers: IServerInfo[];
   }
   export interface IServerInfo {
      address: IIPEndpoint;
      name: string;
      ping: number;
      numPlayers: number;
      maxPlayers: number;
      missionName: string;
      mapName: string;
   }
   export interface IGetServersInfo {
      gameId: string;
      addresses: IIPEndpoint[];
      includePlayers?: boolean;
   }
   export interface IGetServers {
      gameId: string;
   }
   export interface IQueryServers {
      gameId: string;
      name?: string;
      missionName?: string;
      mapName?: string;
      minPlayers?: number;
      maxPlayers?: number;
   }
}